
#include <Servo.h>
#include <Keypad.h>

//SwitchLock function variables

int alternator = 0;

char myCombo[3] = {0, 0, 0};

//Keypad mapping declaration

const byte rowsCount = 4;
const byte columnsCount = 4;

//Servo objects declaration

//Dispenser servo objects

Servo Alpha;
Servo Beta;
Servo Gamma;
Servo Delta;

//Arm servo objects

Servo Base;
Servo Leg;
Servo Body;
Servo Neck;
Servo Gripper;
 
//Keymap matrix mapping

char keys[rowsCount][columnsCount] = {
   { '1','2','3', 'A' },
   { '4','5','6', 'B' },
   { '7','8','9', 'C' },
   { '*','0','#', 'D' }
};
 
//Keymap pin mapping

const byte rowPins[rowsCount] = { 36, 34, 32, 30 };
const byte columnPins[columnsCount] = { 28, 26, 24, 22 };
 
//Keymap function declaration

Keypad keypad = Keypad(makeKeymap(keys), rowPins, columnPins, rowsCount, columnsCount);

//Servo position declaration

//DISPENSER
int positionAlpha = 0;
int positionBeta = 0;
int positionGamma = 0;
int positionDelta = 0;

//ARM
int positionBase = 0;
int positionLeg = 0;
int positionBody = 0;
int positionNeck = 0;
int positionGripper = 0;


//Setup function

void setup() {

  //Serial monitor setup
   Serial.begin(9600);

//Dispenser pin attachments

  Alpha.attach(2);
  Beta.attach(3);
  Gamma.attach(4);
  Delta.attach(5);

//Arm pin attachments

  Base.attach(8);
  Leg.attach(9);
  Body.attach(10);
  Neck.attach(11);
  Gripper.attach(12);

}

//Servo functions
//Sweep movement for dispensing movement

int dispenserAlpha(){

for (positionAlpha = 0; positionAlpha <= 180; positionAlpha += 10) { 

    Alpha.write(positionAlpha);
    delay(15);
  }
  for (positionAlpha = 180; positionAlpha >= 0; positionAlpha -= 10) {
    Alpha.write(positionAlpha);
    delay(15);
  }

return 0;

}

int dispenserBeta(){

for (positionBeta = 0; positionBeta <= 180; positionBeta += 10) { 

    Beta.write(positionBeta);
    delay(15);
  }
  for (positionBeta = 180; positionBeta >= 0; positionBeta -= 10) {
    Beta.write(positionBeta);
    delay(15);
  }

return 0;

}

//Griffith did nothing wrong

int dispenserGamma(){

for (positionGamma = 0; positionGamma <= 180; positionGamma += 10) { 

    Gamma.write(positionGamma);
    delay(15);
  }
  for (positionGamma = 180; positionGamma >= 0; positionGamma -= 10) {
    Gamma.write(positionGamma);
    delay(15);
  }

return 0;

}

int dispenserDelta(){

for (positionDelta = 0; positionDelta <= 180; positionDelta += 10) { 

    Delta.write(positionDelta);
    delay(15);
  }
  for (positionDelta = 180; positionDelta >= 0; positionDelta -= 10) {
    Delta.write(positionDelta);
    delay(15);
  }

return 0;

}

//Arm functions

int forwardArm(int command, Servo thingy){

if(command == 0){

thingy.write(0);

}

else {

thingy.write(180);

}

}

//DIVISOR

//Switch Lock Function


int switchLock(){ 
  
  if(alternator == 0){

    alternator = 1;

  }
  else {
  
  alternator = 0;

  }
  
  return 0; }

//Main

void loop() {

//God, forgive me for what I am about to do

   char key = keypad.getKey();

  if(key == '1'){ Serial.println(key); }
  if(key == '2'){ Serial.println(key); }
  if(key == '3'){ Serial.println(key); }
  if(key == '4'){ Serial.println(key); }
  if(key == '5'){ Serial.println(key); }
  if(key == '6'){ Serial.println(key); }
  if(key == '7'){ Serial.println(key); }
  if(key == '8'){ Serial.println(key); }
  if(key == '9'){ Serial.println(key); }
  if(key == '0'){ Serial.println(key); }

  //DIVISOR OPERATORS

  if(key == 'A'){ Serial.println(key);

    if(alternator == 1){
                     dispenserAlpha();    
    }
                  }
  if(key == 'B'){ Serial.println(key);

    if(alternator == 1){ 
                  dispenserBeta();     
    }
                  }
  if(key == 'C'){ Serial.println(key); 

    if(alternator == 1){
                  dispenserGamma();     
    }
                  }
  if(key == 'D'){ Serial.println(key); 

    if(alternator == 1){
                  dispenserDelta();     
    }
                  }
  if(key == '*'){ 
    
                  Serial.println(key); 
                  switchLock();        
                  Serial.println(alternator);
                  
                  }

  //DIVISOR OPERATORS

  if(key == '#'){ Serial.println(key); }

  //COMBO SETTINGS

  if(key != 0){

    if(key == 'A'
    || key == 'B'
    || key == 'C'
    || key == 'D'){

    //Jesus of Nazareth, please forgive me for this Italian sin I'm now committing

    if(myCombo[0] != 0){

      if(myCombo[1] != 0){

        if(myCombo[2] == 0){

          myCombo[2] = key;

        }

      }

    }

    if(myCombo[0] != 0){

      if(myCombo[1] == 0){

        myCombo[1] = key;

      }

    }    

    if(myCombo[0] == 0){

      myCombo[0] = key;

    }

  }}

  //Shinji, get in the goddamn eva
if(key != 0){
  if(myCombo[0] != 0 
  && myCombo[1] != 0
  && myCombo[2] != 0){

    Serial.println("CONGRATS, YOU MADE A COMBO");
    myCombo[0] = 0;
    myCombo[1] = 0;
    myCombo[2] = 0;



  }
}

  //ARM-SETTINGS

 }